#nicer-bash-prompt:
#
# Creates a bash prompt that includes red hostname if production, as well as
# current git branch, and a shortened current directory (last two directories
# in $PWD).  Also sets a short window title so it works better with tab-based
# terminal programs such as Mac Terminal.  Tested on Linux with Mac Terminal
# ssh'ed in, should work fine with other setups.
#
# Requires tput and git.  See CUSTOMIZE comments to configure for your hosts, domains, etc.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# ======== History setup - optional ===============
#
# If you use this, must be called as part of per-prompt command (see CUSTOMIZE below to enable) - ensure that all terminals
# have same view of bash history, updated after every command.  Only enable this if you understand that cursor-up
# will sometimes be surprising on returning to a terminal window!
# history_sync: After every command, append latest commands to hist file, then clear shell history, and re-read all from file
history_sync() {
  history -a; history -c; history -r;
}

# Append rather than overwrite
shopt -s histappend

is_osx() {
  local platform
  platform=$(uname)
  [ "$platform" == "Darwin" ]
}

# ======== Prompt setup ===========================
#
# Expand any symbolic links in the specified pathname and convert to absolute path
realpath() {
  f="$1"
  if [[ -d "$f" ]]; then
    base=""
    dir="$f"
  else
    base="/$(basename "$f")"
    dir="$(dirname "$f")"
  fi

  dir=$(cd "$dir" && /bin/pwd)
  echo "$dir$base"
}

promptpath () {
  realpwd="$(realpath "$PWD")"
  realhome="$(realpath "$HOME")"

  # if we are in the home directory, show tilde if possible
  if echo "${realpwd}" | grep -q "^${realhome}"; then
    path="$(echo "${realpwd}" | sed "s|^${realhome}|\~|")"
    if [ "${path}" = "~" ] || [ "$(dirname "${path}")" = "~" ]; then
      echo "${path}"
    else
      echo "$(basename "$(dirname "$path")")/$(basename "$path")"
    fi
    return
  fi

  path_dir=$(dirname "${PWD}")
  # if our parent dir is a top-level directory, don't mangle it
  if [ "$(dirname "$path_dir")" = "/" ]; then
    echo "${PWD}"
  else
    path_parent="$(basename "${path_dir}")"
    path_base="$(basename "${PWD}")"

    echo "${path_parent}/${path_base}"
  fi
}

# Terminal colours - must use \[ and \] to tell readline about them, so bash
# line editing works
inverse="\[$(tput smso)\]"
uninverse="\[$(tput rmso)\]"
bold="\[$(tput bold)\]"
unbold="\[$(tput dim)\]"
reset="\[$(tput sgr0)\]"
black="$bold\[$(tput setaf 0)\]"
red="\[$(tput setaf 1)\]"
green="$bold\[$(tput setaf 2)\]"
blue="$bold\[$(tput setaf 4)\]"
magenta="$bold\[$(tput setaf 5)\]"
yellow="$bold\[$(tput setaf 3)\]"
cyan="$bold\[$(tput setaf 6)\]"

yarn_prompt="[ðŸ§£]"
npm_prompt="[ðŸ“¦]"
prompt_package_manager() {
  local package=''
  if [[ -f "package.json" ]]; then
    if [[ -f "yarn.lock" ]]; then
      package=${yarn_prompt}
    else
      package=${npm_prompt}
    fi

    echo "${magenta}${package} ";
  else
    return
  fi
}

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
        git update-index --really-refresh -q &> /dev/null;
      fi;

      # Check for uncommitted changes in the index.
      if ! git diff --quiet --ignore-submodules --cached; then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! git diff-files --quiet --ignore-submodules --; then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if git rev-parse --verify refs/stash &>/dev/null; then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null)"
    if [[ -z "${branchName}" ]]; then
      branchName="$(git rev-parse --short HEAD 2> /dev/null)"
    fi
    if [[ -z "${branchName}" ]]; then
      branchName="unknown"
    fi

    [ -n "${s}" ] && s=" ${s}";

    if [ "${branchName}" = "master" ]; then
      branchName="${inverse}${red}${branchName}${uninverse}";
    fi

    echo -e "${green}(${branchName}${blue}${s}${green}) ";
  else
    return;
  fi;
}

prompt_kube() {
  # Check for kubectl.
  if [[ $(command -v kubectl) ]]; then

    if [[ $? == 0 ]]; then
      kube="$(kubectl config view --output=json | jq -r '."current-context"' | cut -d _ -f 4-)"
    fi

    [ -n "${kube}" ] && s=" (${kube})";

    if [ ! -z "${kube}" ]; then
      echo -e "${cyan}[${kube}] "
    fi
  else
    return;
  fi;
}

# Output bash prompt, run after every command - output of script is PS1 value, with all values expanded
bash_prompt() {
  promptpath=$(promptpath)
  branch=$(prompt_git)
  kube=$(prompt_kube)
  # package=$(prompt_package_manager)
  user="${USER} "
  # prompt="${yellow}${user}${kube}${branch}${package}${blue}${promptpath}\$${black} ${reset}"
  prompt="${yellow}${user}${kube}${branch}${blue}${promptpath}\$${black} ${reset}"
  echo -n "${prompt}"
}

# Highlight the user name when logged in as root.
# // TODO Not used, remove
# if [[ "${USER}" == "root" ]]; then
#     userStyle="${red}";
# else
#     userStyle="${blue}";
# fi;

# Highlight the hostname when connected via SSH.
# // TODO Not used, remove
# if [[ "${SSH_TTY}" ]]; then
#     hostStyle="${bold}${cyan}";
# else
#     hostStyle="${cyan}";
# fi;

# Function called every time bash displays the prompt
function per_prompt_command {
  # Set the window title if a terminal window (Mac or Linux)
  # case "$TERM" in
  #   xterm*|rxvt*)
  #     if [ $sysmode = 'Local' ]; then
  #       echo -ne "\033]0;["$sysmode"] "${USER}":"$(basename "$PWD")"\007"
  #     fi
  #     if [ $sysmode != 'Local' ]; then
  #       echo -ne "\033]0;["$sysmode"] "${USER}":""$HOSTNAME""\007"
  #     fi
  #     ;;
  # esac
  # Do the prompt
  PS1=$(bash_prompt)
  # PS1='\w\$ '
}
export PROMPT_COMMAND=per_prompt_command
